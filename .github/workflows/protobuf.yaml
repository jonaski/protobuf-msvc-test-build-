---

name: protobuf

on:
  push:

env:
  curl_options: '-f -O -L --connect-timeout 15 -m 30 --retry 15 --retry-delay 10 --retry-max-time 300 --retry-all-errors'
  cmake_loglevel: 'DEBUG'
  zlib_version: '1.3.1'
  abseil_cpp_version: '20240116.2'
  protobuf_version: '27.1'

jobs:
  protobuf:
    name: protobuf
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
       arch: [ x86_64 ]
       buildtype: [ release, debug ]
    steps:

      - name: Set buildtype
        shell: bash
        run: echo "buildtype=$(echo ${{matrix.buildtype}} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set cmake and meson buildtype
        shell: bash
        run: |
          echo "cmake_buildtype=$(echo ${{env.buildtype}} | sed 's/.*/\u&/')" >> $GITHUB_ENV
          echo "meson_buildtype=${{env.buildtype}}" >> $GITHUB_ENV

      - name: Set prefix path
        shell: bash
        run: |
          echo "prefix_path_backslash=c:\strawberry_msvc_${{matrix.arch}}_${{env.buildtype}}" >> $GITHUB_ENV
          echo "prefix_path_backslash2=c:\\\\strawberry_msvc_${{matrix.arch}}_${{env.buildtype}}" >> $GITHUB_ENV
          echo "prefix_path_forwardslash=c:/strawberry_msvc_${{matrix.arch}}_${{env.buildtype}}" >> $GITHUB_ENV
          echo "prefix_path_unix=/c/strawberry_msvc_${{matrix.arch}}_${{env.buildtype}}" >> $GITHUB_ENV

      - name: Set lib postfix
        if: env.buildtype == 'debug'
        shell: bash
        run: echo "lib_postfix=d" >> $GITHUB_ENV

      - name: Set arch variables (x86_64)
        shell: bash
        run: |
          echo "openssl_platform=VC-WIN64A" >> $GITHUB_ENV
          echo "msbuild_platform=x64" >> $GITHUB_ENV
          echo "arch_short=x64" >> $GITHUB_ENV
          echo "arch_win=win64" >> $GITHUB_ENV
          echo "libdir=lib64" >> $GITHUB_ENV
          echo "bindir=bin64" >> $GITHUB_ENV

      - name: Create directories
        shell: bash
        run: |
          mkdir -p ${{env.prefix_path_unix}}/{bin,lib,include}
          mkdir -p ${{env.prefix_path_unix}}/lib/pkgconfig

      - name: Update PATH
        shell: pwsh
        run: echo "${{env.prefix_path_backslash}}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Copy bin files
        shell: bash
        run: cp /c/strawberry/c/bin/{patch.exe,strip.exe,strings.exe,objdump.exe} ${{env.prefix_path_unix}}/bin

      - name: Move conflicting libraries
        shell: bash
        run: |
          mv /c/msys64 /c/msys64_
          mv /c/mingw32 /c/mingw32_
          mv /c/mingw64 /c/mingw64_
          mv /c/strawberry/c /c/strawberry/c_

      #- name: Delete conflicting icu
        #shell: bash
        #run: |
          #find "/c/program files (x86)/windows kits/" -iname 'icu*.lib' -delete
          #find "/c/program files (x86)/windows kits/" -iname 'icu*.h' -delete


      - name: Setup Python
        uses: actions/setup-python@v5

      - name: Install python dependencies
        shell: cmd
        run: pip install meson ninja


      - name: Setup MSVC Environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86_64
          sdk: 10.0.20348.0
          vsversion: 2022
          toolset: 14.40

      - name: Checkout
        uses: actions/checkout@v4


      - name: Create downloads directory
        shell: cmd
        run: mkdir downloads

      - name: Create build directory
        shell: cmd
        run: mkdir build


      - name: Download zlib
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://github.com/madler/zlib/releases/download/v${{env.zlib_version}}/zlib-${{env.zlib_version}}.tar.gz

      - name: Extract zlib
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/zlib-${{env.zlib_version}}.tar.gz

      - name: Configure zlib
        shell: cmd
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
        working-directory: build/zlib-${{env.zlib_version}}
        run: cmake --log-level="${{env.cmake_loglevel}}" -S . -B build -G "NMake Makefiles" -DCMAKE_BUILD_TYPE="${{env.cmake_buildtype}}" -DCMAKE_INSTALL_PREFIX="${{env.prefix_path_backslash}}"

      - name: Build zlib
        shell: cmd
        env:
          CL: "/MP"
        working-directory: build/zlib-${{env.zlib_version}}/build
        run: cmake --build .

      - name: Install zlib
        shell: cmd
        working-directory: build/zlib-${{env.zlib_version}}/build
        run: cmake --install .

      - name: Copy zlib (release)
        if: env.buildtype == 'release'
        shell: bash
        run: cp ${{env.prefix_path_unix}}/lib/zlib.lib ${{env.prefix_path_unix}}/lib/z.lib

      - name: Copy zlib (debug)
        if: env.buildtype == 'debug'
        shell: bash
        run: |
          cp ${{env.prefix_path_unix}}/lib/zlibd.lib ${{env.prefix_path_unix}}/lib/z.lib
          cp ${{env.prefix_path_unix}}/lib/zlibd.lib ${{env.prefix_path_unix}}/lib/zd.lib


      - name: Download abseil-cpp
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://github.com/abseil/abseil-cpp/archive/refs/tags/${{env.abseil_cpp_version}}.tar.gz

      - name: Extract abseil-cpp
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/${{env.abseil_cpp_version}}.tar.gz

      - name: Configure abseil-cpp
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
          CXXFLAGS: '/D_DISABLE_CONSTEXPR_MUTEX_CONSTRUCTOR'
        working-directory: build/abseil-cpp-${{env.abseil_cpp_version}}
        run: cmake --log-level="${{env.cmake_loglevel}}" -S . -B build -G "NMake Makefiles" -DCMAKE_BUILD_TYPE="${{env.cmake_buildtype}}" -DCMAKE_INSTALL_PREFIX="${{env.prefix_path_backslash}}" -DBUILD_SHARED_LIBS=ON

      - name: Build abseil-cpp
        env:
          CL: "/MP"
        working-directory: build/abseil-cpp-${{env.abseil_cpp_version}}/build
        run: cmake --build .

      - name: Install abseil-cpp
        working-directory: build/abseil-cpp-${{env.abseil_cpp_version}}/build
        run: cmake --install .


      - name: Download Protobuf
        shell: bash
        working-directory: downloads
        run: curl ${{env.curl_options}} https://github.com/protocolbuffers/protobuf/releases/download/v${{env.protobuf_version}}/protobuf-${{env.protobuf_version}}.tar.gz

      - name: Extract Protobuf
        shell: bash
        working-directory: build
        run: tar -xf ../downloads/protobuf-${{env.protobuf_version}}.tar.gz

      - name: Configure Protobuf
        env:
          CL: "/MP"
          PKG_CONFIG_EXECUTABLE: ${{env.prefix_path_backslash}}\bin\pkgconf.exe
          PKG_CONFIG_PATH: ${{env.prefix_path_backslash}}\lib\pkgconfig
          CXXFLAGS: '/D_DISABLE_CONSTEXPR_MUTEX_CONSTRUCTOR'
        working-directory: build/protobuf-${{env.protobuf_version}}
        run: cmake --log-level="${{env.cmake_loglevel}}" -S . -B build -G "NMake Makefiles" -DCMAKE_BUILD_TYPE="${{env.cmake_buildtype}}" -DCMAKE_INSTALL_PREFIX="${{env.prefix_path_backslash}}" -DBUILD_SHARED_LIBS=ON -Dprotobuf_BUILD_SHARED_LIBS=ON -Dprotobuf_BUILD_TESTS=OFF -Dprotobuf_BUILD_EXAMPLES=OFF -Dprotobuf_BUILD_PROTOC_BINARIES=ON -Dprotobuf_WITH_ZLIB=ON -Dprotobuf_ABSL_PROVIDER="package"

      - name: Build Protobuf
        env:
          CL: "/MP"
        working-directory: build/protobuf-${{env.protobuf_version}}/build
        run: cmake --build .

      - name: Install Protobuf
        working-directory: build/protobuf-${{env.protobuf_version}}/build
        run: cmake --install .

      - name: Install Protobuf pkgconfig file
        working-directory: build/protobuf-${{env.protobuf_version}}/build
        run: copy protobuf.pc ${{env.prefix_path_backslash}}\lib\pkgconfig\

      - name: Test protoc
        shell: cmd
        run: protoc --version
